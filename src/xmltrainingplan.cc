#include <zlib.h>
#include <iostream>
#include <fstream>
#include <cerrno>
#include <cstring>
#include <sstream>

#include "xmltrainingplan.h"

/*
 * EveMon skill plan example, thanks to Chruker on #eve-dev@Coldfront.
 * Direct export from EveMon with both, Planned and Prereq skills.
 * http://pastebin.com/f13baf757
 */

void
XmlTrainingPlanImport::import_from_file (std::string const& filename)
{
  /* Check extension. */
  if (filename.size() < 4)
    throw Exception("Error detecting file type. "
        "Valid types are \"emp\" and \"xml\".");

  std::string extension = filename.substr(filename.size() - 4);
  if (extension == ".emp" || extension == ".xml")
  {
    std::cout << "Parsing XML: " << filename << " ..." << std::endl;
    XmlDocumentPtr xmldoc = XmlDocument::create_from_file(filename);
    this->parse_xml(xmldoc);
  }
  else
  {
    throw Exception("Error detecting file type. "
        "Valid types are \"emp\" and \"xml\".");
  }
}

/* ---------------------------------------------------------------- */

void
XmlTrainingPlanImport::parse_xml (XmlDocumentPtr xmldoc)
{
  xmlNodePtr root = xmldoc->get_root_element();

  if (root->type != XML_ELEMENT_NODE
      || xmlStrcmp(root->name, (xmlChar const*)"plan"))
    throw Exception("Invalid XML root. Expecting <plan> node.");

  xmlNodePtr node;
  for (node = root->children; node != 0; node = node->next)
  {
    if (node->type != XML_ELEMENT_NODE)
      continue;

    if (!xmlStrcmp(node->name, (xmlChar const*)"Entries"))
      break;
  }

  if (node == 0)
    throw Exception("Unexpected plan structure. Expecting <Entries> tag.");

  ApiSkillTreePtr tree = ApiSkillTree::request();
  /* Iterate over all plan entries. */
  for (node = node->children; node != 0; node = node->next)
  {
    if (node->type != XML_ELEMENT_NODE)
      continue;

    if (xmlStrcmp(node->name, (xmlChar const*)"entry"))
      continue;

    std::string skill_name;
    std::string entry_type;
    int skill_level = -1;

    /* Parse a single plan entry here. */
    for (xmlNodePtr cnode = node->children; cnode != 0; cnode = cnode->next)
    {
      if (cnode->type != XML_ELEMENT_NODE)
        continue;

      this->set_string_if_node_text(cnode, "SkillName", skill_name);
      this->set_string_if_node_text(cnode, "EntryType", entry_type);
      this->set_int_if_node_text(cnode, "Level", skill_level);
    }

    /* We got a valid skill description. Add it. */
    if (!skill_name.empty() && !entry_type.empty() && skill_level >= 0)
    {
      ApiSkill const* skill = tree->get_skill_for_name(skill_name);
      if (skill == 0)
      {
        std::cout << "Error finding skill ID for " << skill_name << std::endl;
        continue;
      }
      this->plan.push_back(XmlTrainingItem(skill, skill_level, false));
    }
    else
    {
      std::cout << "Error finding skill description" << std::endl;
    }
  }
}

/* ---------------------------------------------------------------- */

void
XmlTrainingPlanExport::write_to_file (std::string const& filename)
{
  if (filename.size() <= 4)
    throw Exception("Invalid filename for plan export");

  /* Generate the export XML string. */

  std::stringstream xmldata;
  xmldata << "<?xml version=\"1.0\"?>" << std::endl;
  xmldata << "<plan xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
      << " xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">" << std::endl;
  xmldata << "  <Entries>" << std::endl;

  for (std::size_t i = 0; i < this->plan.size(); ++i)
  {
    XmlTrainingItem const& item = this->plan[i];
    xmldata << "    <entry>" << std::endl;
    xmldata << "      <SkillName>" << item.skill->name
        << "</SkillName>" << std::endl;
    xmldata << "      <Level>" << item.level << "</Level>" << std::endl;
    xmldata << "      <EntryType>"
        << (item.prerequisite ? "Prerequisite" : "Planned")
        << "</EntryType>" << std::endl;
    xmldata << "    </entry>" << std::endl;
  }

  xmldata << "  </Entries>" << std::endl;
  xmldata << "</plan>" << std::endl;
  xmldata << "<!-- Generated by GtkEveMon "
      << "(http://gtkevemon.battleclinic.com) -->" << std::endl;

  std::string xmldata_str = xmldata.str();

  /* Write the string stream to file. */

  std::string extension = filename.substr(filename.size() - 4);
  if (extension == ".emp")
  {
    /* Write XML to gzipped file. */
    ::gzFile out = ::gzopen(filename.c_str(), "wb");
    if (out == 0)
      throw Exception("Error writing to file: "
          + std::string(::strerror(errno))); // FIXME Use errno?
    ::gzwrite(out, xmldata_str.c_str(), (unsigned int)xmldata_str.size());
    ::gzclose(out);
  }
  else if (extension == ".xml")
  {
    /* Write XML to unzipped, plain file. */
    std::ofstream out(filename.c_str());
    if (!out.good())
      throw Exception("Error writing to file: "
          + std::string(::strerror(errno)));
    out.write(xmldata_str.c_str(), xmldata_str.size());
    out.close();
  }
  else
  {
    throw Exception("Invalid file extension for plan export. "
        "Valid extensions are \"emp\" and \"xml\".");
  }
}
